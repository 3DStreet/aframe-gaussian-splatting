AFRAME.registerComponent("gaussian_splatting",{schema:{src:{type:"string",default:"train.splat"}},init:function(){this.el.sceneEl.renderer.setPixelRatio(1),fetch(this.data.src).then(data=>data.blob()).then(res=>res.arrayBuffer()).then(buffer=>{var size=new THREE.Vector2,focal=(this.el.sceneEl.renderer.getSize(size),size.y/2/Math.tan(this.el.sceneEl.camera.el.components.camera.data.fov/2*Math.PI/180)),geometry=new THREE.PlaneGeometry(4,4);const material=new THREE.ShaderMaterial({uniforms:{viewport:{value:new Float32Array([size.x,size.y])},focal:{value:focal}},vertexShader:`
					out vec4 vColor;
					out vec2 vPosition;
					uniform vec2 viewport;
					uniform float focal;

					void main () {
						vec4 center = vec4(instanceMatrix[3][0], instanceMatrix[3][1], instanceMatrix[3][2], 1);
						// Adjust View Pose
						mat4 adjViewMatrix = inverse(viewMatrix);
						adjViewMatrix[0][1] *= -1.0;
						adjViewMatrix[1][0] *= -1.0;
						adjViewMatrix[1][2] *= -1.0;
						adjViewMatrix[2][1] *= -1.0;
						adjViewMatrix[3][1] *= -1.0;
						adjViewMatrix = inverse(adjViewMatrix);
						mat4 modelMatrix_fixy = modelMatrix;
						modelMatrix_fixy[3][1] *= -1.0;
						mat4 modelView = adjViewMatrix * modelMatrix_fixy;

						vec4 camspace = modelView * center;
						vec4 pos2d = projectionMatrix * mat4(1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1) * camspace;

						float bounds = 1.2 * pos2d.w;
						if (pos2d.z < -pos2d.w || pos2d.x < -bounds || pos2d.x > bounds
							|| pos2d.y < -bounds || pos2d.y > bounds) {
							gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
							return;
						}

						mat3 J = mat3(
							focal / camspace.z, 0., -(focal * camspace.x) / (camspace.z * camspace.z), 
							0., -focal / camspace.z, (focal * camspace.y) / (camspace.z * camspace.z), 
							0., 0., 0.
						);

						mat3 W = transpose(mat3(modelView));
						mat3 T = W * J;
						mat3 cov = transpose(T) * mat3(instanceMatrix) * T;

						vec2 vCenter = vec2(pos2d) / pos2d.w;

						float diagonal1 = cov[0][0] + 0.3;
						float offDiagonal = cov[0][1];
						float diagonal2 = cov[1][1] + 0.3;

						float mid = 0.5 * (diagonal1 + diagonal2);
						float radius = length(vec2((diagonal1 - diagonal2) / 2.0, offDiagonal));
						float lambda1 = mid + radius;
						float lambda2 = max(mid - radius, 0.1);
						vec2 diagonalVector = normalize(vec2(offDiagonal, lambda1 - diagonal1));
						vec2 v1 = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
						vec2 v2 = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

						vColor = vec4(instanceMatrix[0][3], instanceMatrix[1][3], instanceMatrix[2][3], instanceMatrix[3][3]);
						vPosition = position.xy;

						gl_Position = vec4(
							vCenter 
								+ position.x * v2 / viewport * 2.0 
								+ position.y * v1 / viewport * 2.0, pos2d.z / pos2d.w, 1.0);
					}
					`,fragmentShader:`
					in vec4 vColor;
					in vec2 vPosition;

					void main () {
						float A = -dot(vPosition, vPosition);
						if (A < -4.0) discard;
						float B = exp(A) * vColor.a;
						gl_FragColor = vec4(vColor.rgb, B);
					}
				`,blending:THREE.CustomBlending,blendSrcAlpha:THREE.OneFactor,depthTest:!0,depthWrite:!1});window.addEventListener("resize",()=>{var size=new THREE.Vector2,focal=(this.el.sceneEl.renderer.getSize(size),size.y/2/Math.tan(this.el.sceneEl.camera.el.components.camera.data.fov/2*Math.PI/180));material.uniforms.viewport.value[0]=size.x,material.uniforms.viewport.value[1]=size.y,material.uniforms.focal.value=focal});var vertexCount=Math.floor(buffer.byteLength/32),f_buffer=new Float32Array(buffer),u_buffer=new Uint8Array(buffer),matrices=new Float32Array(16*vertexCount);for(let i=0;i<vertexCount;i++){var quat=new THREE.Quaternion((u_buffer[32*i+28+1]-128)/128,(u_buffer[32*i+28+2]-128)/128,-(u_buffer[32*i+28+3]-128)/128,(u_buffer[32*i+28]-128)/128),center=new THREE.Vector3(f_buffer[8*i+0],f_buffer[8*i+1],-f_buffer[8*i+2]),scale=new THREE.Vector3(f_buffer[8*i+3],f_buffer[8*i+3+1],f_buffer[8*i+3+2]),mtx=new THREE.Matrix4,quat=(mtx.makeRotationFromQuaternion(quat),mtx.transpose(),mtx.scale(scale),mtx.clone());mtx.transpose(),mtx.premultiply(quat),mtx.setPosition(center),mtx.elements[3]=u_buffer[32*i+24]/255,mtx.elements[7]=u_buffer[32*i+24+1]/255,mtx.elements[11]=u_buffer[32*i+24+2]/255,mtx.elements[15]=u_buffer[32*i+24+3]/255;for(let j=0;j<16;j++)matrices[16*i+j]=mtx.elements[j]}size=this.el.sceneEl.camera.el.object3D.matrixWorld.elements,focal=new Float32Array([size[2],size[6],size[10]]);this.iMesh=new THREE.InstancedMesh(geometry,material,vertexCount),this.iMesh.frustumCulled=!1,this.iMesh.instanceMatrix.array=this.sortSplats(matrices,focal),this.iMesh.instanceMatrix.needsUpdate=!0,this.el.object3D.add(this.iMesh),this.worker=new Worker(URL.createObjectURL(new Blob(["(",this.createWorker.toString(),")(self)"],{type:"application/javascript"}))),this.worker.postMessage({sortFunction:this.sortSplats.toString(),matrices:matrices.buffer},[matrices.buffer]),this.worker.onmessage=e=>{this.iMesh.instanceMatrix.array=new Float32Array(e.data.sortedMatrices),this.iMesh.instanceMatrix.needsUpdate=!0,this.sortReady=!0},this.sortReady=!0})},tick:function(time,timeDelta){var camera_mtx;this.sortReady&&(this.sortReady=!1,camera_mtx=this.el.sceneEl.camera.el.object3D.matrixWorld.elements,camera_mtx=new Float32Array([camera_mtx[2],camera_mtx[6],camera_mtx[10]]),this.worker.postMessage({view:camera_mtx},[camera_mtx.buffer]))},createWorker:function(self){let sortFunction,matrices;self.onmessage=e=>{if(e.data.sortFunction&&(eval(e.data.sortFunction),sortFunction=sortSplats),e.data.matrices&&(matrices=new Float32Array(e.data.matrices)),e.data.view){const view=new Float32Array(e.data.view),sortedMatrices=sortFunction(matrices,view);self.postMessage({sortedMatrices:sortedMatrices},[sortedMatrices.buffer])}}},sortSplats:function sortSplats(matrices,view){var vertexCount=matrices.length/16;let maxDepth=-1/0,minDepth=1/0;var depthList=new Float32Array(vertexCount),sizeList=new Int32Array(depthList.buffer);for(let i=0;i<vertexCount;i++){var depth=-(view[0]*matrices[16*i+12]-view[1]*matrices[16*i+13]-view[2]*matrices[16*i+14]);(depthList[i]=depth)>maxDepth&&(maxDepth=depth),depth<minDepth&&(minDepth=depth)}var depthInv=65535/(maxDepth-minDepth),counts0=new Uint32Array(65536);for(let i=0;i<vertexCount;i++)sizeList[i]=(depthList[i]-minDepth)*depthInv|0,counts0[sizeList[i]]++;var starts0=new Uint32Array(65536);for(let i=1;i<65536;i++)starts0[i]=starts0[i-1]+counts0[i-1];var depthIndex=new Uint32Array(vertexCount);for(let i=0;i<vertexCount;i++)depthIndex[starts0[sizeList[i]]++]=i;var sortedMatrices=new Float32Array(16*vertexCount);for(let j=0;j<vertexCount;j++){var i=depthIndex[j];for(let k=0;k<16;k++)sortedMatrices[16*j+k]=matrices[16*i+k]}return sortedMatrices}});